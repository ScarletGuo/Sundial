// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sundial_grpc.proto

#include "sundial_grpc.pb.h"
#include "sundial_grpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sundial_rpc {

static const char* Sundial_GRPC_SYNC_method_names[] = {
  "/sundial_rpc.Sundial_GRPC_SYNC/contactRemote",
};

std::unique_ptr< Sundial_GRPC_SYNC::Stub> Sundial_GRPC_SYNC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Sundial_GRPC_SYNC::Stub> stub(new Sundial_GRPC_SYNC::Stub(channel));
  return stub;
}

Sundial_GRPC_SYNC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_contactRemote_(Sundial_GRPC_SYNC_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Sundial_GRPC_SYNC::Stub::contactRemote(::grpc::ClientContext* context, const ::sundial_rpc::SundialRequest& request, ::sundial_rpc::SundialResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_contactRemote_, context, request, response);
}

void Sundial_GRPC_SYNC::Stub::experimental_async::contactRemote(::grpc::ClientContext* context, const ::sundial_rpc::SundialRequest* request, ::sundial_rpc::SundialResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_contactRemote_, context, request, response, std::move(f));
}

void Sundial_GRPC_SYNC::Stub::experimental_async::contactRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sundial_rpc::SundialResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_contactRemote_, context, request, response, std::move(f));
}

void Sundial_GRPC_SYNC::Stub::experimental_async::contactRemote(::grpc::ClientContext* context, const ::sundial_rpc::SundialRequest* request, ::sundial_rpc::SundialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_contactRemote_, context, request, response, reactor);
}

void Sundial_GRPC_SYNC::Stub::experimental_async::contactRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sundial_rpc::SundialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_contactRemote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sundial_rpc::SundialResponse>* Sundial_GRPC_SYNC::Stub::AsynccontactRemoteRaw(::grpc::ClientContext* context, const ::sundial_rpc::SundialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sundial_rpc::SundialResponse>::Create(channel_.get(), cq, rpcmethod_contactRemote_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sundial_rpc::SundialResponse>* Sundial_GRPC_SYNC::Stub::PrepareAsynccontactRemoteRaw(::grpc::ClientContext* context, const ::sundial_rpc::SundialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sundial_rpc::SundialResponse>::Create(channel_.get(), cq, rpcmethod_contactRemote_, context, request, false);
}

Sundial_GRPC_SYNC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sundial_GRPC_SYNC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sundial_GRPC_SYNC::Service, ::sundial_rpc::SundialRequest, ::sundial_rpc::SundialResponse>(
          [](Sundial_GRPC_SYNC::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::sundial_rpc::SundialRequest* req,
             ::sundial_rpc::SundialResponse* resp) {
               return service->contactRemote(ctx, req, resp);
             }, this)));
}

Sundial_GRPC_SYNC::Service::~Service() {
}

::grpc::Status Sundial_GRPC_SYNC::Service::contactRemote(::grpc::ServerContext* context, const ::sundial_rpc::SundialRequest* request, ::sundial_rpc::SundialResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Sundial_GRPC_ASYNC_method_names[] = {
  "/sundial_rpc.Sundial_GRPC_ASYNC/contactRemote",
};

std::unique_ptr< Sundial_GRPC_ASYNC::Stub> Sundial_GRPC_ASYNC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Sundial_GRPC_ASYNC::Stub> stub(new Sundial_GRPC_ASYNC::Stub(channel));
  return stub;
}

Sundial_GRPC_ASYNC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_contactRemote_(Sundial_GRPC_ASYNC_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Sundial_GRPC_ASYNC::Stub::contactRemote(::grpc::ClientContext* context, const ::sundial_rpc::SundialRequest& request, ::sundial_rpc::SundialResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_contactRemote_, context, request, response);
}

void Sundial_GRPC_ASYNC::Stub::experimental_async::contactRemote(::grpc::ClientContext* context, const ::sundial_rpc::SundialRequest* request, ::sundial_rpc::SundialResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_contactRemote_, context, request, response, std::move(f));
}

void Sundial_GRPC_ASYNC::Stub::experimental_async::contactRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sundial_rpc::SundialResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_contactRemote_, context, request, response, std::move(f));
}

void Sundial_GRPC_ASYNC::Stub::experimental_async::contactRemote(::grpc::ClientContext* context, const ::sundial_rpc::SundialRequest* request, ::sundial_rpc::SundialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_contactRemote_, context, request, response, reactor);
}

void Sundial_GRPC_ASYNC::Stub::experimental_async::contactRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sundial_rpc::SundialResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_contactRemote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sundial_rpc::SundialResponse>* Sundial_GRPC_ASYNC::Stub::AsynccontactRemoteRaw(::grpc::ClientContext* context, const ::sundial_rpc::SundialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sundial_rpc::SundialResponse>::Create(channel_.get(), cq, rpcmethod_contactRemote_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sundial_rpc::SundialResponse>* Sundial_GRPC_ASYNC::Stub::PrepareAsynccontactRemoteRaw(::grpc::ClientContext* context, const ::sundial_rpc::SundialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sundial_rpc::SundialResponse>::Create(channel_.get(), cq, rpcmethod_contactRemote_, context, request, false);
}

Sundial_GRPC_ASYNC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sundial_GRPC_ASYNC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sundial_GRPC_ASYNC::Service, ::sundial_rpc::SundialRequest, ::sundial_rpc::SundialResponse>(
          [](Sundial_GRPC_ASYNC::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::sundial_rpc::SundialRequest* req,
             ::sundial_rpc::SundialResponse* resp) {
               return service->contactRemote(ctx, req, resp);
             }, this)));
}

Sundial_GRPC_ASYNC::Service::~Service() {
}

::grpc::Status Sundial_GRPC_ASYNC::Service::contactRemote(::grpc::ServerContext* context, const ::sundial_rpc::SundialRequest* request, ::sundial_rpc::SundialResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sundial_rpc

